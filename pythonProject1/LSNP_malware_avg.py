import pandas as pd
from nltk.tokenize import word_tokenize
import numpy as np
import time
import Model
import Generator
import Classifier
import numpy as np
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import time


def experiment(X, y):
    train_x, test_x, train_y, test_y = train_test_split(X, y, test_size=0.2)

    maxgen = 100

    classifier = Classifier.Classifier(train_x, train_y)
    model = Model.Model()

    model_w, model_l = classifier.train_classification(train_x, train_y)
    predict = model.classification(model_w, model_l, train_x, train_y)
    acc_train_last = model.accuracy_rate(predict, train_y)
    acc = []
    it = []
    start_time = time.time()
    patience = 0
    for i in range(maxgen):
        it.append(i+1)
        model_w, model_l = classifier.train_classification(train_x, train_y)
        predict = model.classification(model_w, model_l, train_x, train_y)
        acc_train = model.accuracy_rate(predict, train_y)
        acc.append(acc_train)
        if acc_train > 0.97:
            break

        acc_train_last = acc_train
    end_time = time.time()
    elapsed_time = end_time - start_time

    predict = model.classification(model_w, model_l, test_x, test_y)
    accuracy = accuracy_score(test_y, predict)
    precision = precision_score(test_y, predict, average='weighted')
    recall = recall_score(test_y, predict, average='weighted')
    f1 = f1_score(test_y, predict, average='weighted')
    return it[-1], accuracy, precision, recall, f1


df = pd.read_csv('drebin-processed-215.csv')

y = df['class']
X = df.drop('class', axis=1)

scaler = StandardScaler()
X = scaler.fit_transform(X)
encoder = OneHotEncoder()
y = np.array(y).reshape(-1, 1)
y = encoder.fit_transform(y).toarray()

num_epchs = []
accuracies = []
precisions = []
recalls = []
f1s = []
for trial in range(20):
    num_epoch, acc, p, r, f1 = experiment(X, y)
    num_epchs.append(num_epoch)
    accuracies.append(acc)
    precisions.append(p)
    recalls.append(r)
    f1s.append(f1)

print(f"Num epochs: {np.mean(np.array(num_epchs)):.4f}")
print(f"Accuracy: {np.mean(np.array(accuracies)):.4f}")
print(f"Precision: {np.mean(np.array(precisions)):.4f}")
print(f"Recall: {np.mean(np.array(recalls)):.4f}")
print(f"F1 Score: {np.mean(np.array(f1s)):.4f}")



